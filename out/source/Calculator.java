/* autogenerated by Processing revision 1282 on 2022-05-18 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class Calculator extends PApplet {


class Button{
  private int x, y, w, h;
  private String text;
  private boolean pressed;
  private int textColor, fillColor, borderColor;


  Button(int x, int y, int w, int h, String text) {
    this(x, y, w, h, text, color(255), color(150, 210, 255), color(50, 75, 90));
  }

  Button(int x, int y, int w, int h, String text, int textColor, int fillColor, int borderColor) {
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = h;
    this.text = text;
    this.textColor = textColor;
    this.fillColor = fillColor;
    this.borderColor = borderColor;
    pressed = false;
  }

  public int getTextColor() {
    return textColor;
  }
  public int getFillColor() {
    return fillColor;
  }
  public int getBorderColor() {
    return borderColor;
  }
  public boolean getPressed(){
    return pressed;
  }
  public String getText(){
    return text;
  }

  public void setColors(int textColor, int fillColor, int borderColor) {
    this.textColor = textColor;
    this.fillColor = fillColor;
    this.borderColor = borderColor;
  }

  public void updatePressed(){
    if(mousePressed && mouseX >= x && mouseX <= x + w && mouseY >= y && mouseY <= y + h){
      pressed = true;
    }else{
      pressed = false;
    }
  }

  public void display() {
    fill(fillColor);
    stroke(borderColor);
    rect(x, y, w, h, 5);
    if(pressed) {
      fill(0, 0, 0, 50);
      rect(x, y, w, h, 5);
    }

    fill(textColor);
    textAlign(CENTER);
    text(text, x + w/2, y + h/2);
  }

}
boolean acceptOperation;
int inputLimit = 20;
int decLimit = 4;
int decCount = 0;
int padding = 5;
char operation;
String input = "";
int backgroundColor = color(150);
Button[] buttons;
String[] texts = {
  "A/C", "/",
  "7", "8", "9", "*",
  "4", "5", "6", "-",
  "1", "2", "3", "+",
  "0", ".", "b", "="};

 public void setup(){
  /* size commented out by preprocessor */;
  textAlign(CENTER);
  textSize(30);
  acceptOperation = true;
  buttons = new Button[18];
  /*  LAYOUT 
   * A/C /
   *  7  8  9  *
   *  4  5  6  -
   *  1  2  3  +
   *  0  .  b  =
   */
  
  int x = padding;
  int y = 150;
  int w = (width - 5 * padding) / 4;
  int h = (height - y - 6 * padding) / 5;
  
  for(int i = 0; i < buttons.length; i++){
    buttons[i] = new Button(x, y, w, h, texts[i]);
    if(texts[i].equals("=")) buttons[i].setColors(buttons[i].getTextColor(), color(255, 125, 0), buttons[i].getBorderColor());
    if(texts[i].equals("A/C")) buttons[i].setColors(buttons[i].getTextColor(), color(255, 125, 0), buttons[i].getBorderColor());
    if(i == 1){ //exclusive case for lacking parens
      x = padding;
      y += h + padding;
    } else {
      if((i - 1) % 4 == 0){ //new row, without parens
        x = padding;
        y += h + padding;
      } else {
        x += w + padding; //next column
      }
    }
  }
}

 public void draw(){
  background(backgroundColor);
  fill(0);
  textAlign(RIGHT);
  text(input, width - padding * 2, 50);
  for(Button b : buttons) b.display();
}

 public void keyPressed(){
  if(input.length() > inputLimit) return;
}

 public float calculate(String input, char operation){
  float a = Float.parseFloat(input.substring(0, input.indexOf(operation)));
  float b = Float.parseFloat(input.substring(input.indexOf(operation) + 1));
  if(operation == '*') return a * b;
  else if(operation == '+') return a + b;
  else if(operation == '-') return a - b;
  else if(operation == '/') return a / b;
  return 0;
}

 public void mousePressed(){
  for(Button b : buttons) b.updatePressed();
}

 public void mouseReleased(){
  for(Button b : buttons){
    boolean prev = b.getPressed();
    b.updatePressed();
    if(prev && !b.getPressed() && input.length() < inputLimit){
      if(!b.getText().equals("=") && !b.getText().equals("A/C") && !b.getText().equals("b")){
        input += b.getText();
      } else if(b.getText().equals("=")){
        //input = String.valueOf(calculate(input, operation));
        println(input);
      } else if(b.getText().equals("A/C")){
        input = "";
        decCount = 0;
      } else if(b.getText().equals("b") && input.length() > 0){
        input = input.substring(0, input.length() - 1);
      }
    }
  } 
}


  public void settings() { size(350, 500); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "Calculator" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
